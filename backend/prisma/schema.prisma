// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Cargo {
  ADMIN
  FUNCIONARIO
  MOTORISTA
}

enum Status {
  ATIVO
  INATIVO
}

enum StatusVenda {
  ABERTA
  PAGA
  CANCELADA
  ENTREGUE
  LOJA
}

enum FormaPagamento {
  DINHEIRO
  CARTAO
  PIX
  BOLETO
  OUTRO
}

enum StatusEntrega {
  PENDENTE
  EM_ROTA
  ENTREGUE
  FALHA
}

model Usuario {
  id           Int       @id @default(autoincrement())
  nome         String
  email        String    @unique
  senhaHash    String //hash
  cargo        Cargo     @default(FUNCIONARIO)
  status       Status    @default(ATIVO)
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt
  ultimoLogin  DateTime?
  Venda        Venda[]
  Entrega      Entrega[]

  @@map("tb_usuario")
}

model Cliente {
  id                     Int                      @id @default(autoincrement()) @map("id_cliente")
  nome                   String                   @db.VarChar(150)
  cpfCnpj                String?                  @unique @map("cpf_cnpj") @db.VarChar(20)
  telefone               String?                  @db.VarChar(20)
  email                  String?                  @unique @db.VarChar(100)
  endereco               String?                  @db.Text
  status                 Status                   @default(ATIVO)
  criadoEm               DateTime                 @default(now()) @map("criado_em")
  atualizadoEm           DateTime                 @updatedAt @map("atualizado_em")
  ClienteProdutoValidade ClienteProdutoValidade[]
  Venda                  Venda[]

  @@index([cpfCnpj])
  @@map("tb_cliente")
}

model Produto {
  id                     Int                      @id @default(autoincrement()) @map("id_produto")
  nome                   String                   @db.VarChar(150)
  tipo                   String?                  @db.VarChar(100)
  preco                  Decimal                  @db.Decimal(10, 2)
  estoqueAtual           Int                      @default(0) @map("estoque_atual")
  imageUrl               String?                  @map("imagem_url")
  criadoEm               DateTime                 @default(now()) @map("criado_em")
  atualizadoEm           DateTime                 @updatedAt @map("atualizado_em")
  ClienteProdutoValidade ClienteProdutoValidade[]
  VendaItem              VendaItem[]
}

model ClienteProdutoValidade {
  id         Int      @id @default(autoincrement())
  clienteId  Int      @map("id_cliente")
  produtoId  Int      @map("id_produto")
  validade   DateTime
  quantidade Int?     @default(1)
  observacao String?

  cliente Cliente @relation(fields: [clienteId], references: [id])
  produto Produto @relation(fields: [produtoId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  @@unique([clienteId, produtoId], map: "uq_cliente_produto_validade") // 1 registro vigente por cliente/produto
}

model Venda {
  id             Int             @id @default(autoincrement()) @map("id_venda")
  clienteId      Int             @map("id_cliente")
  usuarioId      Int             @map("id_usuario") 
  formaPagamento FormaPagamento?
  status         StatusVenda     @default(ABERTA)
  totalBruto     Decimal         @default(0) @db.Decimal(10, 2)
  desconto       Decimal         @default(0) @db.Decimal(10, 2)
  totalLiquido   Decimal         @default(0) @db.Decimal(10, 2)
  observacao     String?         @db.Text
  dataVenda      DateTime        @default(now()) @map("data_venda")
  criadoEm       DateTime        @default(now()) @map("criado_em")
  atualizadoEm   DateTime        @updatedAt @map("atualizado_em")

  cliente  Cliente     @relation(fields: [clienteId], references: [id])
  vendedor Usuario     @relation(fields: [usuarioId], references: [id])
  itens    VendaItem[]
  entrega  Entrega?

  @@index([clienteId])
  @@index([usuarioId])
  @@map("vendas")
}

model VendaItem {
  id            Int       @id @default(autoincrement()) @map("id_venda_item")
  vendaId       Int       @map("id_venda")
  produtoId     Int       @map("id_produto")
  quantidade    Int
  precoUnitario Decimal   @db.Decimal(10, 2)
  subtotal      Decimal   @db.Decimal(10, 2)
  validade      DateTime?
  observacao    String?   @db.Text

  venda   Venda   @relation(fields: [vendaId], references: [id])
  produto Produto @relation(fields: [produtoId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  // Se quiser impedir produto duplicado na mesma venda, descomente:
  // @@unique([vendaId, produtoId], map: "uq_venda_produto")

  @@index([vendaId])
  @@index([produtoId])
  @@map("venda_itens")
}

model Entrega {
  id           Int           @id @default(autoincrement()) @map("id_entrega")
  vendaId      Int           @unique @map("id_venda")
  motoristaId  Int?          @map("id_motorista")
  status       StatusEntrega @default(PENDENTE)
  dataSaida    DateTime?     @map("data_saida")
  dataPrevista DateTime?     @map("data_prevista")
  dataEntrega  DateTime?     @map("data_entrega")
  observacao   String?       @db.Text

  venda     Venda    @relation(fields: [vendaId], references: [id])
  motorista Usuario? @relation(fields: [motoristaId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  @@index([motoristaId])
  @@map("entregas")
}

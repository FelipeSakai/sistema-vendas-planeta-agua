// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Cargo {
  ADMIN
  FUNCIONARIO
  MOTORISTA
}

enum Status {
  ATIVO
  INATIVO
}

model Usuario {
  id           Int       @id @default(autoincrement())
  nome         String
  email        String    @unique
  senhaHash    String //hash
  cargo        Cargo     @default(FUNCIONARIO)
  status       Status    @default(ATIVO)
  criadoEm     DateTime  @default(now())
  atualizadoEm DateTime  @updatedAt
  ultimoLogin  DateTime?

  @@map("tb_usuario")
}

model Cliente {
  id                     Int                      @id @default(autoincrement()) @map("id_cliente")
  nome                   String                   @db.VarChar(150)
  cpfCnpj                String?                  @unique @map("cpf_cnpj") @db.VarChar(20)
  telefone               String?                  @db.VarChar(20)
  email                  String?                  @unique @db.VarChar(100)
  endereco               String?                  @db.Text
  status                 Status                   @default(ATIVO)
  criadoEm               DateTime                 @default(now()) @map("criado_em")
  atualizadoEm           DateTime                 @updatedAt @map("atualizado_em")
  ClienteProdutoValidade ClienteProdutoValidade[]

  @@index([cpfCnpj])
  @@map("tb_cliente")
}

model Produto {
  id                     Int                      @id @default(autoincrement()) @map("id_produto")
  nome                   String                   @db.VarChar(150)
  tipo                   String?                  @db.VarChar(100)
  preco                  Decimal                  @db.Decimal(10, 2)
  estoqueAtual           Int                      @default(0) @map("estoque_atual")
  imageUrl               String?                  @map("imagem_url")
  criadoEm               DateTime                 @default(now()) @map("criado_em")
  atualizadoEm           DateTime                 @updatedAt @map("atualizado_em")
  ClienteProdutoValidade ClienteProdutoValidade[]
}

model ClienteProdutoValidade {
  id         Int      @id @default(autoincrement())
  clienteId  Int      @map("id_cliente")
  produtoId  Int      @map("id_produto")
  validade   DateTime
  quantidade Int?     @default(1)
  observacao String?

  cliente Cliente @relation(fields: [clienteId], references: [id])
  produto Produto @relation(fields: [produtoId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  @@unique([clienteId, produtoId], map: "uq_cliente_produto_validade") // 1 registro vigente por cliente/produto
}
